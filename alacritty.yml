# Configuration for Alacritty, the GPU enhanced terminal emulator
import:
  - "~/.config/alacritty/themes/omni.yaml"

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  dimensions:
    columns: 160
    lines: 40

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  dynamic_title: true


  # Window decorations
  # Setting this to false will result in window without borders and title bar.
  decorations: full

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 20000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: SF Mono
    style: Regular

  # The bold font face
  bold:
    family: SF Mono
    style: Bold

  # The italic font face
  italic:
    family: SF Mono
    style: Regular Italic

  # Point size of the font
  size: 16.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

debug:
  # Should display the render timer
  render_timer: false

bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  url:
    # URL launcher
    #
    # This program is executed when clicking on a text which is recognized as a URL.
    # The URL is always added to the command as the last parameter.
    launcher: open

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to both the primary and
  # the selection clipboard. Otherwise, it will only be copied to the selection
  # clipboard.
  save_to_clipboard: true

cursor:
  # Cursor style
  #
  # Values for 'style':
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block
  unfocused_hollow: false

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/zsh.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
# shell:
#   program: /usr/local/bin/fish
#   args:
#     - --login
#
shell:
  program: /usr/local/bin/tmux
  args:
    - new-session

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
# Scrolling will not work in tmux by default.
# See https://superuser.com/questions/310251/use-terminal-scrollbar-with-tmux
  - { key: Up,       mods: Command, action: ScrollPageUp                 }
  - { key: Down,     mods: Command, action: ScrollPageDown               }
# C-b c       Create a new window
  - { key: T,        mods: Command, chars:  "\x02\x63"                   }
# C-b n       Select the next window  
  - { key: Right,    mods: Command, chars:  "\x02\x6e"                   }
# C-b p       Select the next window  
  - { key: Left,     mods: Command, chars:  "\x02\x70"                   }
# C-b 0       Select window 0-9
# Map Cmd-1 to window 0
  - { key: Key1,     mods: Command, chars:  "\x02\x30"                   }
  - { key: Key2,     mods: Command, chars:  "\x02\x31"                   }
  - { key: Key3,     mods: Command, chars:  "\x02\x32"                   }
  - { key: Key4,     mods: Command, chars:  "\x02\x33"                   }
  - { key: Key5,     mods: Command, chars:  "\x02\x34"                   }
  - { key: Key6,     mods: Command, chars:  "\x02\x35"                   }
  - { key: Key7,     mods: Command, chars:  "\x02\x36"                   }
  - { key: Key8,     mods: Command, chars:  "\x02\x37"                   }
  - { key: Key9,     mods: Command, chars:  "\x02\x38"                   }
# C-b "          split vertically (top/bottom)
  - { key: D,        mods: Command|Shift, chars:  "\x02\x22"             }
# C-b %          split horizontally (left/right)
  - { key: D,        mods: Command, chars:  "\x02\x25"                   }
# C-b right          go to the next pane right
  - { key: Right,    mods: Command|Alt, chars:  "\x02\x1b\x5b\x43"       }
# C-b left;          go to the next pane left
  - { key: Left,     mods: Command|Alt, chars:  "\x02\x1b\x5b\x44"       }
# C-b down;          go to the next pane down
  - { key: Down,     mods: Command|Alt, chars:  "\x02\x1b\x5b\x42"       }
# C-b up;            go to the next pane up
  - { key: Up,       mods: Command|Alt, chars:  "\x02\x1b\x5b\x41"       }
# C-b }          move the current pane to the next position
  - { key: Right,    mods: Command|Alt|Shift, chars:  "\x02\x7d"         }
# C-b {          move the current pane to the previous position
  - { key: Left,     mods: Command|Alt|Shift, chars:  "\x02\x7b"         }
# resize current pane by 1 row/column
  - { key: Up,     mods: Command|Control, chars:  "\x02\x1b\x1b\x5b\x41" }
  - { key: Down,   mods: Command|Control, chars:  "\x02\x1b\x1b\x5b\x42" }
  - { key: Left,   mods: Command|Control, chars:  "\x02\x1b\x1b\x5b\x44" }
  - { key: Right,  mods: Command|Control, chars:  "\x02\x1b\x1b\x5b\x43" }
# move the current pane into a new window (‘break pane’)
  - { key: W,      mods: Command,         chars:  "\x02\x21"             }
# zoom toggle the current pane
  - { key: Z,      mods: Command,         chars:  "\x02\x7a"             }
